[0m[1mmodule.karpenter.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_iam_policy_document.controller_assume_role[0]: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mmodule.karpenter.data.aws_iam_policy_document.controller_assume_role[0]: Read complete after 0s [id=819195744][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.karpenter.data.aws_caller_identity.current: Read complete after 0s [id=905418428092][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 1s [id=905418428092][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 1s [id=905418428092][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["karpenter"].data.aws_caller_identity.current: Read complete after 1s [id=905418428092][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=us-east-1][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:sts::905418428092:assumed-role/AWSReservedSSO_AdministratorAccess_bb4bcc50f51a933e/dennis.mathiazo@globant.com][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_iam_instance_profile.karpenter_node[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "karpenter_node" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "karpenter-node-instance-profile"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # kubectl_manifest.arm_node_class[0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "arm_node_class" {
      [32m+[0m[0m api_version             = "karpenter.k8s.aws/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "EC2NodeClass"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "arm64"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.k8s.aws/v1beta1
            kind: EC2NodeClass
            metadata:
              name: arm64
            spec:
              amiFamily: AL2
              instanceTypes:
              - t4g.medium
              - m6g.large
              securityGroupSelectorTerms:
              - tags:
                  aws:eks:cluster-name: opsfleet-eks
              subnetSelectorTerms:
              - tags:
                  karpenter.sh/discovery: opsfleet-eks
              tags:
                Name: karpenter-arm64
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # kubectl_manifest.arm_provisioner[0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "arm_provisioner" {
      [32m+[0m[0m api_version             = "karpenter.sh/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "Provisioner"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "arm64"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.sh/v1beta1
            kind: Provisioner
            metadata:
              name: arm64
            spec:
              providerRef:
                name: arm64
              requirements:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - spot
                - on-demand
              ttlSecondsAfterEmpty: 30
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # kubectl_manifest.x86_node_class[0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "x86_node_class" {
      [32m+[0m[0m api_version             = "karpenter.k8s.aws/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "EC2NodeClass"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "x86"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.k8s.aws/v1beta1
            kind: EC2NodeClass
            metadata:
              name: x86
            spec:
              amiFamily: AL2
              instanceTypes:
              - t3.medium
              - m5.large
              securityGroupSelectorTerms:
              - tags:
                  aws:eks:cluster-name: opsfleet-eks
              subnetSelectorTerms:
              - tags:
                  karpenter.sh/discovery: opsfleet-eks
              tags:
                Name: karpenter-x86
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # kubectl_manifest.x86_provisioner[0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "x86_provisioner" {
      [32m+[0m[0m api_version             = "karpenter.sh/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "Provisioner"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "x86"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.sh/v1beta1
            kind: Provisioner
            metadata:
              name: x86
            spec:
              providerRef:
                name: x86
              requirements:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: karpenter.sh/capacity-type
                operator: In
                values:
                - spot
                - on-demand
              ttlSecondsAfterEmpty: 30
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["aws-ebs-csi-driver"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "aws-ebs-csi-driver"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.30"
      [32m+[0m[0m most_recent        = false
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["coredns"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "coredns"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.30"
      [32m+[0m[0m most_recent        = false
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["kube-proxy"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "kube-proxy"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.30"
      [32m+[0m[0m most_recent        = false
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.30"
      [32m+[0m[0m most_recent        = false
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/opsfleet-eks/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "/aws/eks/opsfleet-eks/cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "/aws/eks/opsfleet-eks/cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "dev"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Terraform"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "true"
    }

[1m  # module.eks.aws_eks_addon.before_compute["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "before_compute" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = "v1.19.0-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "opsfleet-eks"
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m env = {
                  [32m+[0m[0m ENABLE_PREFIX_DELEGATION = "true"
                  [32m+[0m[0m WARM_PREFIX_TARGET       = "1"
                }
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["aws-ebs-csi-driver"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version               = "v1.37.0-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "opsfleet-eks"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = "v1.11.3-eksbuild.2"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "opsfleet-eks"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = "v1.31.2-eksbuild.3"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "opsfleet-eks"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "opsfleet-eks"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.30"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "opsfleet-eks-eks-irsa"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "opsfleet-eks-eks-irsa"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "opsfleet-eks-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "opsfleet-eks-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "opsfleet-eks-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "opsfleet-eks-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "opsfleet-eks-cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "opsfleet-eks-cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "opsfleet-eks-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                        = "dev"
          [32m+[0m[0m "Name"                               = "opsfleet-eks-node"
          [32m+[0m[0m "Terraform"                          = "true"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                        = "dev"
          [32m+[0m[0m "Name"                               = "opsfleet-eks-node"
          [32m+[0m[0m "Terraform"                          = "true"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "owned"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_name"    = "opsfleet-eks"
          [32m+[0m[0m "cluster_version" = "1.30"
        }
    }

[1m  # module.karpenter.data.aws_iam_policy_document.controller[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "controller" {
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m json                    = (known after apply)
      [32m+[0m[0m minified_json           = (known after apply)
      [32m+[0m[0m source_policy_documents = [
          [32m+[0m[0m (known after apply),
        ]
    }

[1m  # module.karpenter.data.aws_iam_policy_document.queue[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "queue" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:SendMessage",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "SqsWrite"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "events.amazonaws.com",
                  [32m+[0m[0m "sqs.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:*",
            ]
          [32m+[0m[0m effect    = "Deny"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "DenyHTTP"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "false",
                ]
              [32m+[0m[0m variable = "aws:SecureTransport"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m type        = "*"
            }
        }
    }

[1m  # module.karpenter.data.aws_iam_policy_document.v033[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "v033" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:launch-template/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:security-group/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:spot-instances-request/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:subnet/*",
              [32m+[0m[0m "arn:aws:ec2:*::image/*",
              [32m+[0m[0m "arn:aws:ec2:*::snapshot/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedEC2InstanceActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:CreateLaunchTemplate",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:fleet/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:launch-template/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:network-interface/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:spot-instances-request/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedEC2InstanceActionsWithTags"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateTags",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:fleet/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:launch-template/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:network-interface/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:spot-instances-request/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedResourceCreationTagging"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "RunInstances",
                  [32m+[0m[0m "CreateFleet",
                  [32m+[0m[0m "CreateLaunchTemplate",
                ]
              [32m+[0m[0m variable = "ec2:CreateAction"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateTags",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:instance/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedResourceTagging"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ForAllValues:StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "karpenter.sh/nodeclaim",
                  [32m+[0m[0m "Name",
                ]
              [32m+[0m[0m variable = "aws:TagKeys"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:DeleteLaunchTemplate",
              [32m+[0m[0m "ec2:TerminateInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:*:*:launch-template/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedDeletion"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:DescribeAvailabilityZones",
              [32m+[0m[0m "ec2:DescribeImages",
              [32m+[0m[0m "ec2:DescribeInstanceTypeOfferings",
              [32m+[0m[0m "ec2:DescribeInstanceTypes",
              [32m+[0m[0m "ec2:DescribeInstances",
              [32m+[0m[0m "ec2:DescribeLaunchTemplates",
              [32m+[0m[0m "ec2:DescribeSecurityGroups",
              [32m+[0m[0m "ec2:DescribeSpotPriceHistory",
              [32m+[0m[0m "ec2:DescribeSubnets",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowRegionalReadActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:RequestedRegion"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ssm:GetParameter",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ssm:us-east-1::parameter/aws/service/*",
            ]
          [32m+[0m[0m sid       = "AllowSSMReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "pricing:GetProducts",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowPricingReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:DeleteMessage",
              [32m+[0m[0m "sqs:GetQueueAttributes",
              [32m+[0m[0m "sqs:GetQueueUrl",
              [32m+[0m[0m "sqs:ReceiveMessage",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowInterruptionQueueActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:PassRole",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowPassingInstanceRole"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "ec2.amazonaws.com",
                ]
              [32m+[0m[0m variable = "iam:PassedToService"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:CreateInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileCreationActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:TagInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileTagActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:AddRoleToInstanceProfile",
              [32m+[0m[0m "iam:DeleteInstanceProfile",
              [32m+[0m[0m "iam:RemoveRoleFromInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:GetInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowInstanceProfileReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "eks:DescribeCluster",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:eks:us-east-1:905418428092:cluster/opsfleet-eks",
            ]
          [32m+[0m[0m sid       = "AllowAPIServerEndpointDiscovery"
        }
    }

[1m  # module.karpenter.data.aws_iam_policy_document.v1[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "v1" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:capacity-reservation/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:security-group/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:subnet/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1::image/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1::snapshot/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedEC2InstanceAccessActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:launch-template/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedEC2LaunchTemplateAccessActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:CreateLaunchTemplate",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:fleet/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:launch-template/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:network-interface/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:volume/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedEC2InstanceActionsWithTags"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "opsfleet-eks",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/eks:eks-cluster-name"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateTags",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:fleet/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:launch-template/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:network-interface/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:volume/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedResourceCreationTagging"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "RunInstances",
                  [32m+[0m[0m "CreateFleet",
                  [32m+[0m[0m "CreateLaunchTemplate",
                ]
              [32m+[0m[0m variable = "ec2:CreateAction"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "opsfleet-eks",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/eks:eks-cluster-name"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateTags",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:instance/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedResourceTagging"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ForAllValues:StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "eks:eks-cluster-name",
                  [32m+[0m[0m "karpenter.sh/nodeclaim",
                  [32m+[0m[0m "Name",
                ]
              [32m+[0m[0m variable = "aws:TagKeys"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEqualsIfExists"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "opsfleet-eks",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/eks:eks-cluster-name"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:DeleteLaunchTemplate",
              [32m+[0m[0m "ec2:TerminateInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:instance/*",
              [32m+[0m[0m "arn:aws:ec2:us-east-1:*:launch-template/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedDeletion"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.sh/nodepool"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:DescribeAvailabilityZones",
              [32m+[0m[0m "ec2:DescribeImages",
              [32m+[0m[0m "ec2:DescribeInstanceTypeOfferings",
              [32m+[0m[0m "ec2:DescribeInstanceTypes",
              [32m+[0m[0m "ec2:DescribeInstances",
              [32m+[0m[0m "ec2:DescribeLaunchTemplates",
              [32m+[0m[0m "ec2:DescribeSecurityGroups",
              [32m+[0m[0m "ec2:DescribeSpotPriceHistory",
              [32m+[0m[0m "ec2:DescribeSubnets",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowRegionalReadActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:RequestedRegion"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ssm:GetParameter",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ssm:us-east-1::parameter/aws/service/*",
            ]
          [32m+[0m[0m sid       = "AllowSSMReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "pricing:GetProducts",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "AllowPricingReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:DeleteMessage",
              [32m+[0m[0m "sqs:GetQueueUrl",
              [32m+[0m[0m "sqs:ReceiveMessage",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowInterruptionQueueActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:PassRole",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
          [32m+[0m[0m sid       = "AllowPassingInstanceRole"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "ec2.amazonaws.com",
                ]
              [32m+[0m[0m variable = "iam:PassedToService"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:CreateInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:iam::905418428092:instance-profile/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileCreationActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "opsfleet-eks",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/eks:eks-cluster-name"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:TagInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:iam::905418428092:instance-profile/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileTagActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "opsfleet-eks",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/eks:eks-cluster-name"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:AddRoleToInstanceProfile",
              [32m+[0m[0m "iam:DeleteInstanceProfile",
              [32m+[0m[0m "iam:RemoveRoleFromInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:iam::905418428092:instance-profile/*",
            ]
          [32m+[0m[0m sid       = "AllowScopedInstanceProfileActions"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "owned",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/kubernetes.io/cluster/opsfleet-eks"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "us-east-1",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/topology.kubernetes.io/region"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*",
                ]
              [32m+[0m[0m variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:GetInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:iam::905418428092:instance-profile/*",
            ]
          [32m+[0m[0m sid       = "AllowInstanceProfileReadActions"
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "eks:DescribeCluster",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:eks:us-east-1:905418428092:cluster/opsfleet-eks",
            ]
          [32m+[0m[0m sid       = "AllowAPIServerEndpointDiscovery"
        }
    }

[1m  # module.karpenter.aws_cloudwatch_event_rule.this["health_event"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "Karpenter interrupt - AWS health event"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "AWS Health Event",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.health",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "KarpenterHealthEvent-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.karpenter.aws_cloudwatch_event_rule.this["instance_rebalance"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "Karpenter interrupt - EC2 instance rebalance recommendation"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Instance Rebalance Recommendation",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "KarpenterInstanceRebalance-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.karpenter.aws_cloudwatch_event_rule.this["instance_state_change"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "Karpenter interrupt - EC2 instance state-change notification"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Instance State-change Notification",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "KarpenterInstanceStateChange-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.karpenter.aws_cloudwatch_event_rule.this["spot_interrupt"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "Karpenter interrupt - EC2 spot instance interruption warning"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Spot Instance Interruption Warning",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "KarpenterSpotInterrupt-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName" = "opsfleet-eks"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.karpenter.aws_cloudwatch_event_target.this["health_event"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterInterruptionQueueTarget"
    }

[1m  # module.karpenter.aws_cloudwatch_event_target.this["instance_rebalance"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterInterruptionQueueTarget"
    }

[1m  # module.karpenter.aws_cloudwatch_event_target.this["instance_state_change"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterInterruptionQueueTarget"
    }

[1m  # module.karpenter.aws_cloudwatch_event_target.this["spot_interrupt"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterInterruptionQueueTarget"
    }

[1m  # module.karpenter.aws_iam_policy.controller[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "controller" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Karpenter controller IAM policy"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "KarpenterController-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
    }

[1m  # module.karpenter.aws_iam_role.controller[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "Karpenter controller IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "KarpenterController-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.karpenter.aws_iam_role_policy_attachment.controller[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "controller" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.karpenter.aws_sqs_queue.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "this" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = 0
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 300
      [32m+[0m[0m name                              = "Karpenter-opsfleet-eks"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = true
      [32m+[0m[0m tags                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 30
    }

[1m  # module.karpenter.aws_sqs_queue_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue_policy" "this" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m policy    = (known after apply)
      [32m+[0m[0m queue_url = (known after apply)
    }

[1m  # module.vpc.aws_default_network_acl.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_network_acl" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_network_acl_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m egress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }
    }

[1m  # module.vpc.aws_default_route_table.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_route_table" "default" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_route_table_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m route                  = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.vpc.aws_default_security_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-default"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
    }

[1m  # module.vpc.aws_route.private_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1b"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1b"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1c"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-private-us-east-1c"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.101.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1a"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.102.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1b"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1b"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.103.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1c"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc-public-us-east-1c"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name"                               = "opsfleet-eks-vpc"
          [32m+[0m[0m "karpenter.sh/discovery"             = "opsfleet-eks"
          [32m+[0m[0m "kubernetes.io/cluster/opsfleet-eks" = "shared"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2023_x86_64_STANDARD"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "opsfleet-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
          [32m+[0m[0m "m5.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "karpenter-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "karpenter"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "karpenter"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m version                = "1.30"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 10
          [32m+[0m[0m min_size     = 2
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "karpenter-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for karpenter EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "karpenter-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "karpenter"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "karpenter"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "karpenter"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::905418428092:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::905418428092:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_AdministratorAccess_bb4bcc50f51a933e",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/opsfleet-eks"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "opsfleet-eks cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["karpenter"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 78 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_certificate_authority_data = (known after apply)
  [32m+[0m[0m cluster_endpoint                   = (known after apply)
  [32m+[0m[0m cluster_name                       = "opsfleet-eks"
  [32m+[0m[0m vpc_id                             = (known after apply)
[33m╷[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
